@mixin font-face($font-family, $url, $weight) {
  @font-face {
    font-family: '#{$font-family}';
    src: url('#{$fonts-path}#{$url}') format('woff');
    font-weight: #{$weight};
    font-display: swap;
  }
}

@mixin min-width($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  }

  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. " + "Please make sure it is defined in `#{$breakpoints}` map.";
  }
}

@mixin max-width($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: #{map-get($breakpoints, $breakpoint) - 1}) {
      @content;
    }
  }

  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. " + "Please make sure it is defined in `#{$breakpoints}` map.";
  }
}


// per-comnponent mixins

@mixin button-elevation {
  box-shadow: -10px -10px 18px #FFFFFF, 10px 10px 18px rgba(94, 93, 121, 0.1);
}

@mixin menu-mobile-border {
  @include max-width(xl) {
    // TODO @menu-mobile-border
    padding-bottom: 20px;
    border-bottom: 1px solid rgba($text, 0.2);
  }

  @include max-width(md) {
    padding-bottom: 15px;
    // margin-bottom: 30px;
  }
}